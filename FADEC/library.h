/**
 * @copyright   Николай Крашенинников
 * @project     Измерительный комплекс СУ
 * @file        library.h
 * @brief       Библиотека дополнительных подпрограмм, заголовочный файл.
 *
 * $Revision: 72 $
 * $Author: Николай $
 * $Date:: 2015-11-09 07:50:52#$
 */

#ifndef LIBRARY_H
#define LIBRARY_H 1

#if ARDUINO >= 100
#include "Arduino.h"
#else
#include "WProgram.h"
#endif

/**
 * Прием символа RS232 от пользователя.
 * Постоянно анализирует буфер приема RS232, и при наличии символа, считывает его из буфера и возвращает.
 *
 * @return Принятый символ.
 *
 * @note Функция использует в своей работе стандартную библиотеку Serial.
 * @note Функция возвращает управление только по приему какого-либо символа.
 * @note Эхо символа функция не выводит. При необходимости это должен делать пользователь.
 */
byte l_getch();

/**
 * Просмотр буфера приема RS232 на наличие данных без их извлечения.
 * Оценивает буфер приема на наличие информации, при ее наличии возвращает true, иначе false. При
 * этом код самой нажатой кнопки из буфера не извлекается. Функция предназначена для определения
 * моментального нажатия на кнопку пользователем.
 *
 * @return Признак нажатия кнопки: true нажата, false не нажата.
 */
bool l_kbhit();

/**
 * Прием вещественного числа по RS232 от пользователя.
 * Пользователь последовательно цифра за цифров вводит вещественное число. Допустимо ввести только
 * целую часть числа, с или без символа разделителя целой или дробной части (разделителем служит
 * точка или запятая). Допускается ввод лишь дробной части числа: при этом ввод должен начинаться
 * с символа разделителя целой и дробной части). Только в начале числа и только однократно
 * пользователь может изменить знак на отрицательный.
 * Завершающий символ '\r' или '\n' (возврат каретки или перевод строки, используется два символа
 * из-за опциональности возможного завершающего символа в разных терминалах).
 * Разделитель целой и дробной части ',' и '.'.
 * Ввод пользователя дублируется на консоль.
 * При возникновении какой-либо ошибки ввода дальнейшая работа функции останавливается и как результат
 * возвращается NAN.
 * Примеры допустимомого ввода:
 * @code
 * 1.123456
 * 3,14
 * -1.0
 * -1
 * 1
 * -.1
 * @endcode
 *
 * @return Принятое вещественное число, NAN в случае ошибки.
 *
 * @note Проверку на соответствие NAN (not-a-number) необходимо выполнять с помощью стандартной
 *       функции isnan().
 * @note Контроля переполнения вещественного числа функция не осуществляет, контроля того, что эхо
 *       вводимых пользователем символов происходит функция не осуществляет.
 */
double l_scanf_double();

/**
 * Фильтр вида W = 1/(Tp + 1) - "Апериодическое звено" (метод прямоугольников).
 *
 * @param[in] x Вход фильтра.
 * @param[in] yp Выход фильтра с предыдущего шага.
 * @param[in] dt Дискретность вычисления фильтра.
 * @param[in] T Постоянная времени фильтра.
 * @return Выход фильтра.
 */
double l_apzveno_mp(double x, double yp, double dt, double T);

/**
 * Фильтр вида "скользящее среднее".
 * Осуществляет выборку среднего значения из входного набора данных #array фиксированного размера
 * #size методом скользащего окна. Т.е. очередное значение #x записывается в конец последовательности.
 *
 * @param[in] x Вход фильтра.
 * @param[in,out] array Массив данных фильтра.
 * @param[in] size Размер массива данных фильтра.
 * @return Выход фильтра.
 */
double l_average(double x, double *arr, size_t size);

/**
 * Установка начальных условий фильтра вида "скользящее среднее".
 * Предустанавливает всю входную последовательность #arr фильтра размера #size в предопределенное
 * значение #init.
 *
 * @param[in,out] arr Массив данных фильтра.
 * @param[in] size Размер массива данных фильтра.
 * @param[in] init Значение для инициализации массива данных фильтра.
 */
void l_average_nu(double *arr, size_t size, double init);

#endif  /* LIBRARY_H */
